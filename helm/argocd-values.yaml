global:
  domain: argocd.sith.network
  logging: 
    level: info
configs:
  cm:
    # accounts.gitlab: apiKey
    exec.enabled: true
    statusbadge.enabled: true
    # oidc.config: |
    #   name: Dex
    #   issuer: https://dex.crunchtime.it/dex
    #   clientID: argocd
    #   requestedScopes:
    #     - openid
    #     - groups
    # resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
    #   jqPathExpressions:
    #   - '.webhooks[]?.clientConfig.caBundle'
    # resource.exclusions: |
    #       - apiGroups:
    #           - kyverno.io
    #         kinds:
    #           - AdmissionReport
    #           - BackgroundScanReport
    #           - ClusterAdmissionReport
    #           - ClusterBackgroundScanReport
    #         clusters:
    #           - '*'
  params:
    server.insecure: true
    applicationsetcontroller.enable.progressive.syncs: true
  # rbac:
  #   policy.csv: |
  #     ### assign built-in admin role to argocd-admins
  #     g, argocd-admins, role:admin
  #     ### Allow sync operations on applications within the development project
  #     p, role:sync-dev, applications, sync, development/*, allow
  #     ### Allow read-only on root-app-dev by argocd-devops-plus
  #     g, argocd-devops-plus, role:read-root-app-dev
  #     p, role:read-root-app-dev, applications, get, default/root-app-dev, allow
  #     ### assign additional roles
  #     g, gitlab, role:readonly
  #     g, gitlab, role:sync-dev
  #   scopes: "[groups]"
dex:
  enabled: false
controller:
  replicas: 1
  # metrics:
  #   enabled: true
  #   applicationLabels:
  #     enabled: true
  #   serviceMonitor:
  #     enabled: true
  #     selector:
  #       release: kps
redis-ha:
  enabled: false
  haproxy:
    hardAntiAffinity: false
  hardAntiAffinity: false
server:
  replicas: 2
  # metrics:
  #   enabled: true
  #   serviceMonitor:
  #     enabled: true
  #     selector:
  #       release: kps
  # ingress:
  #   enabled: true
  #   ingressClassName: nginx
  #   annotations:
  #     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  #     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  #   extraTls:
  #     - hosts:
  #       - argocd.crunchtime.it
  #       secretName: crunchtime-wildcard-tls
repoServer:
  replicas: 1
  # metrics:
  #   enabled: true
  #   serviceMonitor:
  #     enabled: true
  #     selector:
  #       release: kps
applicationSet:
  replicas: 1
# notifications:
#   secret:
#     create: false
#     name: "slack-token"
#   metrics:
#     enabled: true
#     serviceMonitor:
#       enabled: true
#       selector:
#         release: kps
#   notifiers:
#     service.slack: |
#       token: $slack-token
#   subscriptions:
#     - recipients:
#       - slack:heartbeat-opsmgmt-sandbox
#       # triggers:
#       # - on-health-degraded
#       # - on-sync-failed
#       # - on-sync-status-unknown
#       # - on-deployed
#       # - on-sync-running
#       # - on-sync-succeeded
  # templates:
  #   template.app-deployed: |
  #     email:
  #       subject: New version of an application {{.app.metadata.name}} is up and running.
  #     message: |
  #       {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
  #     slack:
  #       attachments: |
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#18be52",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Revision",
  #             "value": "{{.app.status.sync.revision}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  #   template.app-health-degraded: |
  #     email:
  #       subject: Application {{.app.metadata.name}} has degraded.
  #     message: |
  #       {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
  #       Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
  #     slack:
  #       attachments: |-
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#f4c030",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  #   template.app-sync-failed: |
  #     email:
  #       subject: Failed to sync application {{.app.metadata.name}}.
  #     message: |
  #       {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
  #       Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
  #     slack:
  #       attachments: |-
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#E96D76",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  #   template.app-sync-running: |
  #     email:
  #       subject: Start syncing application {{.app.metadata.name}}.
  #     message: |
  #       The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
  #       Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
  #     slack:
  #       attachments: |-
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#0DADEA",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  #   template.app-sync-status-unknown: |
  #     email:
  #       subject: Application {{.app.metadata.name}} sync status is 'Unknown'
  #     message: |
  #       {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
  #       Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
  #       {{if ne .serviceType "slack"}}
  #       {{range $c := .app.status.conditions}}
  #           * {{$c.message}}
  #       {{end}}
  #       {{end}}
  #     slack:
  #       attachments: |-
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#E96D76",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  #   template.app-sync-succeeded: |
  #     email:
  #       subject: Application {{.app.metadata.name}} has been successfully synced.
  #     message: |
  #       {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
  #       Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
  #     slack:
  #       attachments: |-
  #         [{
  #           "title": "{{ .app.metadata.name}}",
  #           "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
  #           "color": "#18be52",
  #           "fields": [
  #           {
  #             "title": "Sync Status",
  #             "value": "{{.app.status.sync.status}}",
  #             "short": true
  #           },
  #           {
  #             "title": "Repository",
  #             "value": "{{.app.spec.source.repoURL}}",
  #             "short": true
  #           }
  #           {{range $index, $c := .app.status.conditions}}
  #           {{if not $index}},{{end}}
  #           {{if $index}},{{end}}
  #           {
  #             "title": "{{$c.type}}",
  #             "value": "{{$c.message}}",
  #             "short": true
  #           }
  #           {{end}}
  #           ]
  #         }]
  # triggers:
  #   trigger.on-deployed: |
  #     - description: Application is synced and healthy. Triggered once per commit.
  #       oncePer: app.status.sync.revision
  #       send:
  #       - app-deployed
  #       when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  #   trigger.on-health-degraded: |
  #     - description: Application has degraded
  #       send:
  #       - app-health-degraded
  #       when: app.status.health.status == 'Degraded'
  #   trigger.on-sync-failed: |
  #     - description: Application syncing has failed
  #       send:
  #       - app-sync-failed
  #       when: app.status.operationState.phase in ['Error', 'Failed']
  #   trigger.on-sync-running: |
  #     - description: Application is being synced
  #       send:
  #       - app-sync-running
  #       # when: app.status.operationState.phase in ['Running']
  #       when: time.Now().Sub(time.Parse(app.status.operationState.startedAt)).Minutes() >= 15
  #   trigger.on-sync-status-unknown: |
  #     - description: Application status is 'Unknown'
  #       send:
  #       - app-sync-status-unknown
  #       when: app.status.sync.status == 'Unknown'
  #   trigger.on-sync-succeeded: |
  #     - description: Application syncing has succeeded
  #       send:
  #       - app-sync-succeeded
  #       when: app.status.operationState.phase in ['Succeeded']
